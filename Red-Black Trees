class Color:
    RED=1
    BLACK=2
class Node:
    def __init__(self,parent=None,color=color.RED):
        self.data=data
        self.left_node=None
        self.right_node=None
        self.parent=parent
        self.color=color
    def insert(self,data):
        if self.root is None:
            self.root=Node(data)
            self.settle_violation(self.root)
        else:
            self.insert_node(data,self.root)
    def insert_node(self,data,node):
        if data<node.data:
            if node.left_node:
                self.insert_node(data,node.left_node)
            else:
                node.left_node=Node(data,node)
                self.settle_violation()
        else:
            if node.right_node:
                self.insert_node(data,node.right_node)
            else:
                node.right_node=Node(data,node)
                self.settle_violation()
    
    def traverse(self):
        if self.root:
            self.in_order_traversal(self.root)
    def in_order_traversal(self,node):
        if node.left_node:
            self.in_order_traversal(node.left_node)
        print(node.data)
        if node.right_node:
            self.in_order_traversal(node.right_node)
    
    def rotation_right(self,node):
        print('rotation to the right on node',node.data)
        temp_left_node=node.left_node
        t=temp_left_node.right_node
        temp_left_node.right_node=node
        node.left_node=t
        if t is not None:
            t.parent=node
        temp_parent=node.parent
        node.parent=temp_left_node
        temp_left_node.parent=temp_parent
        if temp_left_node.parent is not None and temp_left_node.parent.left_node == node:
            temp_left_node.parent.left_node=temp_left_node
        if temp_left_node.parent is not None and temp_left_node.parent.right_node == node:
            temp_left_node.parent.right_node=temp_left_node
        if node==self.root:
            self.root=temp_left_node
        
    def rotation_left(self,node):
        print('rotation to the left on node',node.data)
        temp_right_node=node.right_node
        t=temp_right_node.left_node
        temp_right_node.left_node=node
        node.right_node=t
        if t is not None:
            t.parent=node
        temp_parent=node.parent
        node.parent=temp_right_node
        temp_right_node.parent=temp_parent
        if temp_right_node.parent is not None and temp_right_node.parent.left_node == node:
            temp_right_node.parent.left_node=temp_right_node
        if temp_left_node.parent is not None and temp_right_node.parent.right_node == node:
            temp_right_node.parent.right_node=temp_right_node
        if node==self.root:
            self.root=temp_right_node
        
