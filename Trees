class Node:
    def __init__(self,data,parent=None):
        self.data=data
        self.left_node=None
        self.right_node=None
        self.parent=parent
        
class BinarySearchTree:
    def __init__(self):
        # we can access the root node exclusively
        self.root=None
        
    def insert(self,data):
        # this is the first node in BST
        if self.root is None:
            self.root = Node(data)
        else:
            self.insert_node(data,self.root)
    def insert_node(self,data,node):
        # we have to go to the left subtree
        if data<node.data:
            if node.left_node:
                # the left node exists (so we keep going)
                self.insert_node(data, node.left_node)
            else:
                # there is no left child ( so we create one)
                node.left_node = Node(data,node)
        # we have to go to the right subtree
        else:
            if node.right_node:
                self.insert_node(data,node.right_node)
            else:
                node.right_node=Node(data,node)
                
                
    # to get the minimum value from BST
    def get_min(self):
        if self.root:
            return self.get_min_value(self.root)
    def get_min_value(self,node):
        if node.left_node:
            return self.get_min_value(node.left_node)
        return node.data
    
    
    # to get maximum value from BST
    def get_max(self):
        if self.root:
            return self.get_max_value(self.root)
    def get_max_value(self,node):
        if node.left_node:
            return self.get_max_value(node.right_node)
        return node.data
    
    
    # the three traverse functions
    def traverse(self):
        if self.root:
            return self.traverse_in_order(self.root)
    # in order traversel
    def traverse_in_order(self,node):
        if node.left_node:
            self.traverse_in_order(node.left_node)
        print(node.data)
        if node.right_node:
            self.traverse_in_order(node.right_node)
            
            
if __name__=='__main__':
    bst=BinarySearchTree()
    bst.insert(9)
    bst.insert(25)
    bst.insert(4)
    bst.insert(12)
    bst.insert(99)
    bst.insert(-8)
    print('max value : %s' % bst.get_max())
    print('min value : %s' % bst.get_min())
    bst.traverse()
