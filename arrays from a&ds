# reverse an array
def reverse1(t):
    si=0
    ei=len(t)-1
    while ei>si:
        t[si],t[ei]=t[ei],t[si]
        si=si+1
        ei=ei-1
if __name__ == '__main__':
    t=[1,2,3,4,5]
    reverse1(t)
    print(t)


# palindrome
def reverse2(t):
    t=list(t)
    si=0
    ei=len(t)-1
    while ei>si:
        t[si],t[ei]=t[ei],t[si]
        si=si+1
        ei=ei-1
    return ''.join(t)
def pal(s):
    if s == s[::-1]:
        return True
    return False
def paln(s):
    original_string = s
    reverse_string = reverse2(s)
    if original_string==reverse_string:
        return True
    return False
if __name__=='__main__':
    print(pal('carac'))
    print(paln('papp'))


# reverse an integer
def rev_int(num):
    rev=0
    rem=0
    while(num>0):
        rem=num%10
        rev=rev*10+rem
        num=num//10
    return rev
if __name__=='__main__':
    print(rev_int(345609))


# anagram string
def ang(str1,str2):
    if len(str1) != len(str2):
        return False
    str1 = sorted(str1)
    str2 = sorted(str2)
    print(str1)
    print(str2)
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            return False
    return True
if __name__=='__main__':
    str1=['e','f','l','r','s','t','u']
    str2=['e','e','f','l','r','s','t']
    print(ang(str1,str2))


# traping water 
def tw(heights):
    if len(heights) < 3:
        return 0
    left_max = [0 for _ in range(len(heights))]
    right_max = [0 for _ in range(len(heights))]
    for i in range(1,len(heights)):
        left_max[i] = max(left_max[i-1],heights[i-1])
    for i in range(len(heights)-2,-1,-1):
        right_max[i] = max(right_max[i+1],heights[i+1])
    trap=0
    for i in range(1,len(heights)-1):
        if min(left_max[i],right_max[i]>heights[i]):
            trap+=min(left_max[i],right_max[i])-heights[i]
    return trap
if __name__=='__main__':
    print(tw([1,0,2,1,3,1,2,0,3]))
