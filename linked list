# linked list functions
class Node:
    def __init__(self, data):
        self.data=data
        self.next_node=None
        
class LinkedList:
    def __init__(self):
        self.head=None
        self.num_of_nodes=0
    
    def insert_start(self,data):
        self.num_of_nodes+=1
        new_node=Node(data)
        
        if self.head is None:
            self.head = new_node
        else:
            new_node.next_node=self.head
            self.head=new_node
            
    def insert_end(self,data):
        self.num_of_nodes+=1
        new_node=Node(data)
        
        if self.head is None:
            self.head=new_node
        else:
            actual_node=self.head
            while actual_node.next_node is not None:
                actual_node = actual_node.next_node
            actual_node.next_node=new_node
            
    def size_of_list(self):
        return self.num_of_nodes
    
    def traverse(self):
        actual_node=self.head
        while actual_node is not None:
            print(actual_node)
            actual_node=actual_node.next_node
            
    def remove(self,data):
        if self.head is None:
            return
        actual_node=self.head
        previous_node=None
        while actual_node is not None and actual_node.data != data:
            previous_node=actual_node
            actual_node=actual_node.next_node
        if actual_node is None:
            return
        if previous_node is None:
            self.head=actual_node.next_node
        else:
            previous_node.next_node=actual_node.next_node
    

linked_list = LinkedList()
linked_list.insert_start(10)
linked_list.insert_end(20)
linked_list.insert_end(30)
linked_list.insert_end(40)
linked_list.traverse()
linked_list.remove(20)
linked_list.traverse()



# double linked list functions

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        self.previous=None

class DoubleLinkedList:
    def __init__(self):
        self.head =None
        self.tail =None
        
    def insert(self,data):
        new_node =Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.previous = self.tail
            self.tail.next=new_node
            self.tail=new_node
            
    def traverse_forward(self):
        actual_node=self.head
        while actual_node is not None:
            print("%d" % actual_node.data)
            actual_node=actual_node.next
            
    def traverse_backword(self):
        actual_node=self.tail
        while actual_node is not None:
            print("%d" % actual_node.data)
            actual_node=actual_node.previous
     
   def middle(self):
        fast_pointer=self.head
        slow_pointer=self.head
        while fast_pointer.next_node and fast_pointer.next_node.next_node:
            fast_pointer=fast_pointer.next_node.next_node
            slow_pointer=slow_pointer.next_node
        return slow_pointer
    
    def reverse(self):
        current_node=self.head
        previous_node=None
        next_node=None
        while current_node is not None:
            next_node=current_node.next_node
            current_node.next_node=previous_node
            previous_node=current_node
            current_node=next_node
        self.head=previous_node
    

if __name__=='__main__':
    linked_list=DoubleLinkedList()
    linked_list.insert(1)
    linked_list.insert(2)
    linked_list.insert(3)
    linked_list.traverse_backword()
