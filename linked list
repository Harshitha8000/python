# linked list functions
class Node:
    def __init__(self, data):
        self.data=data
        self.next_node=None
        
class LinkedList:
    def __init__(self):
        self.head=None
        self.num_of_nodes=0
    
    def insert_start(self,data):
        self.num_of_nodes+=1
        new_node=Node(data)
        
        if self.head is None:
            self.head = new_node
        else:
            new_node.next_node=self.head
            self.head=new_node
            
    def insert_end(self,data):
        self.num_of_nodes+=1
        new_node=Node(data)
        
        if self.head is None:
            self.head=new_node
        else:
            actual_node=self.head
            while actual_node.next_node is not None:
                actual_node = actual_node.next_node
            actual_node.next_node=new_node
            
    def size_of_list(self):
        return self.num_of_nodes
    
    def traverse(self):
        actual_node=self.head
        while actual_node is not None:
            print(actual_node)
            actual_node=actual_node.next_node
            
    def remove(self,data):
        if self.head is None:
            return
        actual_node=self.head
        previous_node=None
        while actual_node is not None and actual_node.data != data:
            previous_node=actual_node
            actual_node=actual_node.next_node
        if actual_node is None:
            return
        if previous_node is None:
            self.head=actual_node.next_node
        else:
            previous_node.next_node=actual_node.next_node
    

linked_list = LinkedList()
linked_list.insert_start(10)
linked_list.insert_end(20)
linked_list.insert_end(30)
linked_list.insert_end(40)
linked_list.traverse()
linked_list.remove(20)
linked_list.traverse()



# double linked list functions

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        self.previous=None

class DoubleLinkedList:
    def __init__(self):
        self.head =None
        self.tail =None
        
    def insert(self,data):
        new_node =Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.previous = self.tail
            self.tail.next=new_node
            self.tail=new_node
            
    def traverse_forward(self):
        actual_node=self.head
        while actual_node is not None:
            print("%d" % actual_node.data)
            actual_node=actual_node.next
            
    def traverse_backword(self):
        actual_node=self.tail
        while actual_node is not None:
            print("%d" % actual_node.data)
            actual_node=actual_node.previous
     
   def middle(self):
        fast_pointer=self.head
        slow_pointer=self.head
        while fast_pointer.next_node and fast_pointer.next_node.next_node:
            fast_pointer=fast_pointer.next_node.next_node
            slow_pointer=slow_pointer.next_node
        return slow_pointer
    
    def reverse(self):
        current_node=self.head
        previous_node=None
        next_node=None
        while current_node is not None:
            next_node=current_node.next_node
            current_node.next_node=previous_node
            previous_node=current_node
            current_node=next_node
        self.head=previous_node
    

if __name__=='__main__':
    linked_list=DoubleLinkedList()
    linked_list.insert(1)
    linked_list.insert(2)
    linked_list.insert(3)
    linked_list.traverse_backword()


# stact
class Stack:
    def __init__(self):
        self.stack =[]
    
    def push(self,data):
        self.stack.append(data)
    def pop(self):
        if self.stack_size()<1:
            return
        data = self.stack[-1]
        del self.stack[-1]
        return data
    def peek(self):
        return self.stack[-1]
    def is_empty(self):
        return self.stack == []
    def stack_size(self):
        return len(self.stack)
    
stack = Stack()
stack.push(10)
stack.push(20)
stack.push(30)
print('size : %d' % stack.stack_size())
print('popped item : %d' % stack.pop())
print('size : %d' % stack.stack_size())
print('peek item : %d' % stack.peek())


# queue 
class Queue:
    def __init__(self):
        self.queue=[]
    def is_empty(self):
        return self.queue==[]
    def enqueue(self,data):
        self.queue.append(data)
    def dequeue(self):
        if self.size_queue() !=0:
            data=self.queue[0]
            del self.queue[0]
            return data
        else:
            return -1
    def peek(self):
        return self.queue[0]
    def size_queue(self):
        return len(self.queue)
queue=Queue()
queue.enqueue(6)
queue.enqueue(7) 
queue.enqueue(8)
queue.enqueue(9)
print('size : %d'% queue.size_queue())
print('dequeue : %d'% queue.dequeue())
print('size : %d'% queue.size_queue())


# max number in a stack
class MaxStack:
    def __init__(self):
        self.main_stack=[]
        self.max_stack=[]
    def push(self,data):
        self.main_stack.append(data)
        if(len(self.main_stack)==1):
            self.max_stack.append(data)
            return
        
        if data>self.max_stack[-1]:
            self.max_stack.append(data)
        else:
            self.max_stack.append(self.max_stack[-1])
    def pop(self):
        self.max_stack.pop()
        return self.main_stack.pop()
    def get_max_item(self):
        return self.max_stack.pop()
if __name__=='__main__':
        max_stack=MaxStack()
        max_stack.push(1000)
        max_stack.push(4455)
        max_stack.push(16780)
        max_stack.push(55656565)
        print(max_stack.get_max_item())
        

# queue using one stack
class Queue:
    def __init__(self):
        self.stack=[]
    def enqueue(self,data):
        self.stack.append(data)
    def dequeue(self):
        if len(self.stack)==1:
            return self.stack.pop()
        item = self.stack.pop()
        dequeued_item=self.dequeue()
        self.stack.append(item)
        return dequeued_item
if __name__=='__main__':
    queue=Queue()
    queue.enqueue(10)
    queue.enqueue(5)
    queue.enqueue(20)
    print(queue.dequeue())
    queue.enqueue(100)
    print(queue.dequeue())
    print(queue.dequeue())
