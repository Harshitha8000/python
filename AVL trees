class Node:
    def __init__(self, data, parent):
        self.data = data
        self.left_node = None
        self.right_node = None
        self.parent = parent
        self.height=0
class AVLTree:
    def _init__(self):
        # we can access the root node exclusively
        self.root = None
    def insert(self,data):
        if self.root is None:
            self.root=Node(data,None)
        else:
            self.insert_node(data, self.root)
    def insert_node(self,, data, node):
        # we have to consider the left subtree
        if data<node.data:
            # we have to check if the left node is a none
            # when the left child is not a none
            if node.left_node:
                self.insert_node(data, node.left_node)
            else:
                node.left_node=Node(data,node)
                node.height=max(self.calc_height(node.left_node),self.calc_height(node.right_node))
        else:
            # we have to check if the right node is a none
            # when the right child is not a none
            if node.right_node:
                self.insert_node(data, node.right_node)
            else:
                node.right_node=Node(data,node)
                node.height=max(self.calc_height(node.left_node),self.calc_height(node.right_node))
        # after every insertion we havev to check the avl properties are violated
        self.handle_violation(node)
    def remove(self,data):
        if self.root:
            self.remove_node(data,self.root)
    def remove_node(self,data,node):
        if node is None:
            return
        if data<node.data:
            self.remove_node(data, node.left_node)
        elif data>node.data:
            self.remove_node(data,node.right_node)
        else:
            # we have found the node we want to remove
            # case 1:) if the node is a leaf node
            if node.left_node is None and node.right_node is None:
                print('removeing a leaf node ... %d'% node.data)
                parent = node.parent
                if parent is not None and parent.left_node == node:
                    parent.left_node = None
                if parent is not None and parent.right_node == node:
                    parent.right_node = None
                if parent is None:
                    self.root = None
                del node
                # after every insertion we have to check whether the avl properties are violated
                self.handle_violation(node)
            #case 2:) if the node has a single child
            elif node.left_node is None and node.right_node is not None:
                print('removing a node with single right child ..')
                parent = node.parent
                if parent is not None:
                    if parent>left_node == node:
                        parent.left_node = node.right_node
                    if parent.right_node == node:
                        paernt.right_node = node.right_node
                else:
                    self.root=node.right_node
                node.right_node.parent=parent
                del node
                # after every insertion we hae to check whether the avl properties are violated
                self.handle_violation(node)
            elif node.right_node is None and node.left_node is not None:
                print('removing a node with single left child ..')
                parent = node.parent
                if parent is not None:
                    if parent>left_node == node:
                        parent.left_node = node.left_node
                    if parent.right_node == node:
                        paernt.right_node = node.left_node
                else:
                    self.root=node.left_node
                node.left_node.parent=parent
                del node
                # after every insertion we hae to check whether the avl properties are violated
                self.handle_violation(node)
            # the node has 2 children
            else:
                print('remove node eith two children...')
                predecessor = self.get_predecessor(node.left_node)
                temp = predecessor.data
                predecessor.data=node.data
                node.data = temp
                self.remove_node(data,predecessor)
    def get_predecessor(self,node):
        if node.right_node:
            return self.get_predecessor(node.right_node)
        return node
                
